openapi: "3.0.1"
info:
  title: "TowerFarmV1_Core_IAM_DataProcess_DeviceManage"
  version: 1.0.3
  description: API document of core
servers:
- url: "https://xxxxxx.execute-api.ap-northeast-1.amazonaws.com/TowerFarmV1"
  variables:
    basePath:
      default: "PlantFactoryV1"
paths:
  /login:
    get:
      tags:
      - "IAM"
      description: "ユーザー名とパスワードでトークンを取得する"
      parameters:
      - name: "username"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "password"
        in: "query"
        required: true
        schema:
          type: "string"      
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponseModel"
  /signup:
    post:
      tags:
      - "IAM"
      description: "Cognitoユーザープールへのユーザーサインアップ．メールアドレス・パスワード・ユーザー名は必須"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpRequest"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignUpResponseModel"
  /getiotcorecredentials:
    get:
      tags:
      - "IAM"
      description: "AccessKeyId,SecretAccessKey,SessionToken,SigV4Urlを含むIoTコアに接続するための資格情報を取得する"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        schema:
          type: "string"
      - name: "thingName"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "idToken"
        in: "query"
        required: true
        schema:
          type: "string"      
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIotCoreCredentialsResponseModel"
      security:
      - AuthorizationSecurityModel: []
  /deleteuser:
    post:
      tags:
      - "IAM"
      description: "Cognito ユーザープールからユーザーを削除"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteUserRequest"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteUserResponseModel"
      security:
      - AuthorizationSecurityModel: []
  /resetpasswordrequest:
    post:
      tags:
      - "IAM"
      description: "パスワードのリセットリクエスト,リセットコードをメールでユーザーに送信する"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequestRequest"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResetPasswordRequestResponseModel"
  /resetpasswordconfirm:
    post:
      tags:
      - "IAM"
      description: "確認コードでパスワードのリセットを確認する"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordConfirmRequest"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResetPasswordConfirmResponseModel"
  /getidtokeninfo:
    get:
      tags:
      - "IAM"
      description: "idtoken情報を解決する"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        schema:
          type: "string"
      - name: "idToken"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIdtokenInfoResponseModel"
      security:
      - AuthorizationSecurityModel: []
  /refreshtoken:
    get:
      tags:
      - "IAM"
      description: "リフレッシュトークンによるリフレッシュIDトークン"
      parameters:
      - name: "username"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "refreshToken"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenResponseModel"
  /listuser:
    get:
      tags:
      - "IAM"
      description: "すべてのユーザーをリストする"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        schema:
          type: "string"
      - name: "username"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "password"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListUserResponseModel"
      security:
      - AuthorizationSecurityModel: []
  /updateuserattribute:
    put:
      tags:
      - "IAM"
      description: "ユーザー属性をする(電子メールは変更不可)"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserAttributesRequest"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserAttributesResponseModel"
      security:
      - AuthorizationSecurityModel: []
  /enableuser:
    post:
      tags:
      - "IAM"
      description: "ユーザーのアクセス許可を有効または無効にする"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnableUserRequest"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnableUserResponseModel"
      security:
      - AuthorizationSecurityModel: []
  /admincreateuser:
    post:
      tags:
      - "IAM"
      description: "管理者による新しいユーザーの作成"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminCreateUserRequest"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminCreateUserResponseModel"
      security:
      - AuthorizationSecurityModel: []
  /changepassword:
    post:
      tags:
      - "IAM"
      description: "ユーザーのパスワードを変更する"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChangePasswordResponseModel"
  /linetokenexchange:
    get:
      tags:
      - "IAM"
      description: "ラインIDトークンをCognitoトークンに交換する"
      parameters:
      - name: "idToken"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LineTokenExchangeResponseModel"
components:
  schemas:
    LoginResponseModel:
      type: "object"
      properties:
        successed:
          type: "boolean"
        result:
          type: "object"
          properties:
            accessToken:
              type: "string"
            idToken:
              type: "string"
            refreshToken:
              type: "string"
        message:
          type: "string"
    SignUpRequest:
      type: "object"
      properties:
        cognitoUserName:
          type: "string"
        password:
          type: "string"
        attributes:
          type: "object"
          properties:
            name:
              type: "string"
            email:
              type: "string"
    SignUpResponseModel:
      type: "object"
      properties:
        successed:
          type: "boolean"
        result:
          type: "object"
        message:
          type: "string"
    GetIotCoreCredentialsResponseModel:
      type: "object"
      properties:
        successed:
          type: "boolean"
        result:
          type: "object"
          properties:
            ResponseMetadata:
              type: "object"
            Credentials:
              type: "object"
              properties:
                AccessKeyId:
                  type: "string"
                SecretAccessKey:
                  type: "string"
                SessionToken:
                  type: "string"
                Expiration:
                  type: "string"
            AssumedRoleUser:
              type: "object"
            PackedPolicySize:
              type: "integer"
            Policy:
              type: "object"
            ConnectionId:
              type: "string"
            SigV4Url:
              type: "string"
        message:
          type: "string"
    DeleteUserRequest:
      type: "object"
      properties:
        cognitoUserName:
          type: "string"
    DeleteUserResponseModel:
      type: "object"
      properties:
        successed:
          type: "boolean"
        result:
          type: "object"
        message:
          type: "string"
    ResetPasswordRequestRequest:
      type: "object"
      properties:
        email:
          type: "string"
    ResetPasswordRequestResponseModel:
      type: "object"
      properties:
        successed:
          type: "boolean"
        message:
          type: "string"
    ResetPasswordConfirmRequest:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
        confirmCode:
          type: "string"
    ResetPasswordConfirmResponseModel:
      type: "object"
      properties:
        successed:
          type: "boolean"
        message:
          type: "string"
    GetIdtokenInfoResponseModel:
      type: "object"
      properties:
        successed:
          type: "boolean"
        result:
          type: "object"
          properties:
            email:
              type: "string"
            jti:
              type: "string"
            iat:
              type: "string"
            exp:
              type: "string"
            name:
              type: "string"
            auth_time:
              type: "string"
            token_use:
              type: "string"
            event_id:
              type: "string"
            aud:
              type: "string"
            origin_jti:
              type: "string"
            custom:permission:
              type: "string"
            cognito:username:
              type: "string"
            iss:
              type: "string"
            email_verified:
              type: "boolean"
            sub :
              type: "string"
        message:
          type: "string"
    RefreshTokenResponseModel:
      type: "object"
      properties:
        successed:
          type: "boolean"
        result:
          type: "object"
          properties:
            idToken:
              type: "object"
              properties:
                jwtToken:
                  type: "string"
                payload:
                  type: "object"
            refreshToken:
              type: "object"
              properties:
                token:
                  type: "string"
            accessToken:
              type: "object"
              properties:
                jwtToken:
                  type: "string"
        message:
          type: "string"
    ListUserResponseModel:
      type: "object"
      properties:
        successed:
          type: "boolean"
        result:
          type: "array"
          items:
            type: "object"
            properties:
              Username:
                type: "string"
              Attributes:
                type: "string"
              UserCreateDate:
                type: "string"
              UserLastModifiedDate:
                type: "string"
              UserStatus:
                type: "string"
              Enabled:
                type: "boolean"
        message:
          type: "string"
    UpdateUserAttributesRequest:
      type: "object"
      properties:
        cognitoUserName:
          type: "string"
        userAttributes:
          type: "object"
          properties:
            name:
              type: "string"
            address:
              type: "string"
            birthdate:
              type: "string"
            family_name:
              type: "string"
            gender:
              type: "string"
            given_name:
              type: "string"
            locale:
              type: "string"
            middle_name:
              type: "string"
            nickname:
              type: "string"
            phone_number:
              type: "string"
            picture:
              type: "string"
            preferred_username:
              type: "string"
            profile:
              type: "string"
            updated_at:
              type: "string"
            website:
              type: "string"
            zoneinfo:
              type: "string"
            custom:permission:
              type: "string"
    UpdateUserAttributesResponseModel:
      type: "object"
      properties:
        successed:
          type: "boolean"
        message:
          type: "string"
    EnableUserRequest:
      type: "object"
      properties:
        cognitoUserName:
          type: "string"
        isEnable:
          type: "boolean"
    EnableUserResponseModel:
      type: "object"
      properties:
        successed:
          type: "boolean"
        result:
          type: "object"
        message:
          type: "string"
    AdminCreateUserRequest:
      type: "object"
      properties:
        cognitoUserName:
          type: "string"
        attributes:
          type: "object"
          properties:
            name:
              type: "string"
            email:
              type: "string"
    AdminCreateUserResponseModel:
      type: "object"
      properties:
        successed:
          type: "boolean"
        result:
          type: "object"
        message:
          type: "string"
    ChangePasswordRequest:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
        newPassword:
          type: "string"
    ChangePasswordResponseModel:
      type: "object"
      properties:
        successed:
          type: "boolean"
        result:
          type: "object"
        message:
          type: "string"
    LineTokenExchangeResponseModel:
      type: "object"
      properties:
        successed:
          type: "boolean"
        result:
          type: "object"
          properties:
            accessToken:
              type: "string"
            idToken:
              type: "string"
            refreshToken:
              type: "string"
        message:
          type: "string"
  securitySchemes:
    AuthorizationSecurityModel:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
